{
  "name": "Build an MCP Server with Google Calendar and Custom Functions",
  "nodes": [
    {
      "parameters": {
        "options": {
          "systemMessage": "=You are a helpful assistant.\nCurrent datetime is {{ $now.toString() }}"
        }
      },
      "id": "fc3b3743-cbd7-4daa-a0e8-0ddb1993626b",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        928,
        224
      ],
      "typeVersion": 1.8
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "function_name"
            },
            {
              "name": "payload",
              "type": "object"
            }
          ]
        }
      },
      "id": "7354b4b1-826e-44bf-afcb-f5adfec79509",
      "name": "When Executed by Another Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        1360,
        992
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "ab18304c-4f73-430f-b9fa-2ce4d098e1fa",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.function_name }}",
                    "rightValue": "uppercase"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "UPPERCASE"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "606bda79-f401-4de2-be9d-51368c794479",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.function_name }}",
                    "rightValue": "lowercase"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "LOWERCASE"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "4b22e689-e652-47d2-b737-7be00da9f185",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.function_name }}",
                    "rightValue": "random_user_data"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "RANDOM DATA"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "27a75a2c-8058-4a7c-85c1-898cabeac4a1",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.function_name }}",
                    "rightValue": "joke"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "JOKE"
            }
          ]
        },
        "options": {}
      },
      "id": "576ca379-1396-41e3-89fd-a0969283dbb6",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "position": [
        1584,
        960
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "42333f26-8e14-438a-9965-eec31bf4b6a3",
              "name": "converted_text",
              "type": "string",
              "value": "={{ $json.payload.text.toUpperCase() }}"
            }
          ]
        },
        "options": {}
      },
      "id": "afe7f160-9481-4644-9a78-2e0f9bb70d11",
      "name": "Convert Text to Upper Case",
      "type": "n8n-nodes-base.set",
      "position": [
        1888,
        704
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "42333f26-8e14-438a-9965-eec31bf4b6a3",
              "name": "converted_text",
              "type": "string",
              "value": "={{ $json.payload.text.toLowerCase() }}"
            }
          ]
        },
        "options": {}
      },
      "id": "237aea27-1732-4331-bfe6-612340ea147d",
      "name": "Convert Text to Lower Case",
      "type": "n8n-nodes-base.set",
      "position": [
        1888,
        880
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "name": "convert_text_case",
        "description": "Call this tool to convert text to lower case or upper case.",
        "workflowId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $workflow.id }}"
        },
        "workflowInputs": {
          "value": {
            "payload": "={\n  \"text\": \"{{ $fromAI(\"text_to_convert\", \"The text to convert\", \"string\") }}\"\n}\n",
            "function_name": "={{ $fromAI(\"function_name\", \"Either lowercase or uppercase\", \"string\") }}"
          },
          "schema": [
            {
              "id": "function_name",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "function_name",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "payload",
              "type": "object",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "payload",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "id": "c2306056-9e3d-4035-bd80-1f7809f6e211",
      "name": "Convert Text",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        736,
        1088
      ],
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "9f109b75-59f3-4581-90cf-0ae282489175",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [
        720,
        224
      ],
      "webhookId": "7b02318f-1c6b-4f2a-9a4f-b17fa69ea680",
      "typeVersion": 1.1
    },
    {
      "parameters": {},
      "id": "92fa8a75-4e4c-4e9d-80a3-6df15f7b40a1",
      "name": "Simple Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        1024,
        448
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "content": "## MCP Server\n- You must activate the workflow (green).\n- Copy the Production URL of the MCP Server and paste it in the corresponding MCP Client tool.\n- MCP Server must be exeecued first, and listening. Then you can chat with AI agent.\n",
        "height": 776,
        "width": 620,
        "color": 3
      },
      "id": "8622aa9c-8922-4102-b5c5-b5c0033923b5",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        640,
        608
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## MCP Clients\n- For every client here you need to obtain he corresponding Production URL from the MCP Server which is connected to set of functions \n- For example, for another client that will work with Google Calendar, you create another Clinet here, and another MCP server, where you connect functions to it (MCP Server)\n- Test the MCP functions by converting text to lower and upper case, generating five random user profiles, and retrieving three jokes.\n- The MCP Client doesn't need to know ahead of time which tools exist on MCP Server (dynamic)\n- The MCP Client query the MCP server at runtime to get a list of available tools, inspect tool metadata, select and invoke tools\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## MCP Client is not directly connected to MCP Server\n- MCP Client can be on AWS cloud and MCP Server on local PC thus addressing data privacy \n\n",
        "height": 440,
        "width": 952,
        "color": 6
      },
      "id": "cab22636-696e-4de1-89ac-13140e0ac0e9",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1296,
        144
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "category": "randomData",
        "randomDataCount": "={{ $json.payload.number }}"
      },
      "id": "a8ae852e-dcf6-451a-8945-baf8235ba346",
      "name": "Random user data",
      "type": "n8n-nodes-base.debugHelper",
      "position": [
        1888,
        1072
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "name": "random_user_data",
        "description": "Generate random user data",
        "workflowId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $workflow.id }}"
        },
        "workflowInputs": {
          "value": {
            "payload": "={\n  \"number\": {{ $fromAI(\"amount\", \"The amount of user data to generate in integer format\", \"number\") }}\n}",
            "function_name": "random_user_data"
          },
          "schema": [
            {
              "id": "function_name",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "function_name",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "payload",
              "type": "object",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "payload",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "id": "607e0a2d-5bc3-4826-ba80-3542a06f1485",
      "name": "Generate random user data",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        896,
        1088
      ],
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b4548cbe-f3fc-4911-901a-d73182d710a9",
              "name": "First name",
              "type": "string",
              "value": "={{ $json.firstname }}"
            },
            {
              "id": "6e573a27-ef03-4254-8f9b-2c471e1540c2",
              "name": "Last name",
              "type": "string",
              "value": "={{ $json.lastname }}"
            },
            {
              "id": "ac5b5806-bf8e-4e1a-a47d-e7180d31e98a",
              "name": "Email",
              "type": "string",
              "value": "={{ $json.email }}"
            }
          ]
        },
        "options": {}
      },
      "id": "17f67918-0ea2-42aa-8ead-27030afe00dc",
      "name": "Return only some fields",
      "type": "n8n-nodes-base.set",
      "position": [
        2064,
        1072
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "url": "=https://official-joke-api.appspot.com/jokes/random/{{ $json.payload.number }}",
        "options": {}
      },
      "id": "080183c5-3fe4-4582-8627-d727b5facd1a",
      "name": "Joke Request",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1888,
        1248
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "name": "obtain_jokes",
        "description": "Call this tool to obtain random jokes",
        "workflowId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ $workflow.id }}"
        },
        "workflowInputs": {
          "value": {
            "payload": "={\n  \"number\": {{ $fromAI(\"amount\", \"The amount of jokes to request\", \"number\") }}\n}",
            "function_name": "joke"
          },
          "schema": [
            {
              "id": "function_name",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "function_name",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "payload",
              "type": "object",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "payload",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "id": "dce3d9d1-0b65-4cb1-8ace-7d9cebd2cafd",
      "name": "Random Jokes",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        1056,
        1088
      ],
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "content": "## The MCP Server calls these Sub-Workflows.\nA **[subworkflow](https://docs.n8n.io/flow-logic/subworkflows/)** is a separate workflow that can be called by other workflows and is able to receive parameters.\n",
        "height": 772,
        "width": 956,
        "color": 4
      },
      "id": "1f981d44-e36b-4533-b7b9-666d7572dce1",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1296,
        608
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "id": "13af52cd-09c1-4418-ba9d-eceafcd9591c",
      "name": "OpenAI 4o",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        880,
        448
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "r5GJfV3Z63i3azTj",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "# MCP Server and MCP Client on local windows PC with WSL\nThe Model Context Protocol (MCP) is a powerful open standard that allows AI systems—especially large language models (LLMs)—to securely interact with external tools, services, and data sources\n",
        "height": 96,
        "width": 1616
      },
      "id": "fcb6b35a-1c19-4cbf-87cc-ca830844b366",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        640,
        16
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "path": "my-functions"
      },
      "id": "1487a413-1ae2-4b6f-8c70-ad500e4e4492",
      "name": "MCP Server",
      "type": "@n8n/n8n-nodes-langchain.mcpTrigger",
      "position": [
        816,
        880
      ],
      "webhookId": "83f72547-18b7-4f02-846b-27bf39d1efff",
      "typeVersion": 1
    },
    {
      "parameters": {
        "sseEndpoint": "https://n8n-demo.local/mcp/my-functions/sse",
        "options": {}
      },
      "id": "7afa601f-83be-40f4-8d20-81199f125fbd",
      "name": "MCP client 1",
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "position": [
        1456,
        368
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## AI Agent\n\n",
        "height": 440,
        "width": 616
      },
      "id": "4b24dd90-87d1-456f-8cef-feebe88326a9",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        640,
        144
      ],
      "typeVersion": 1
    }
  ],
  "pinData": {},
  "connections": {
    "Switch": {
      "main": [
        [
          {
            "node": "Convert Text to Upper Case",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Convert Text to Lower Case",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Random user data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Joke Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI 4o": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Convert Text": {
      "ai_tool": [
        [
          {
            "node": "MCP Server",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Random Jokes": {
      "ai_tool": [
        [
          {
            "node": "MCP Server",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Random user data": {
      "main": [
        [
          {
            "node": "Return only some fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate random user data": {
      "ai_tool": [
        [
          {
            "node": "MCP Server",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MCP client 1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "7d6b2368-6fa4-4011-9b18-f7fcd6f2a1bb",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "868f11c49489728e58fc6013c3954c5ef5603d874b4ce2cf2bf642824c360c3c"
  },
  "id": "hSmXgM4BqH1UmIgk",
  "tags": []
}